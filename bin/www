#!/usr/bin/env node

// It is important that the first line in this script file must contain shebang (#!) this defines which interpreter program is used to run the script (here: node.js)

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('weatherBE:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Trying to get my Node.js server to talk to Heroku Scheduler.
 */

var pg = require('pg');
pg.connect (process.env.DATABASE_URL, function (err, client, done) {
  var handleError = function(err) {
    if(!err) return false;
    done(client);
    next(err);
    return true;
  };

  client.query ( function barometric () {
    /* Runs every day, every hour */
    var weatherID = process.env.WEATHER_ID;
    var zipcode = '02141';
    http.get('http://api.openweathermap.org/data/2.5/weather?zip='+ zipcode +',us&APPID=' + weatherID, function (response) {
      var body = '';
      response.on('data', function(d) {
        body += d;
      }); // end response w/ DATA function
      response.on('end', function() {
        var parsed = JSON.parse(body);
        console.log("Got response: " + response.statusCode);
        console.log('pressure: ' + parsed.main.pressure);

        Weather.create({
          pressure: parsed.main.pressure,
          humidity: parsed.main.humidity,
          temp: parsed.main.temp,
          cityname: parsed.name,
          cityid: parsed.id,
          // zipcode: zipcode
        }).then(function (weather, err) {
          console.log("weather update worked");
        }).catch(function (err) {
          console.log("weather update failed: " + err);
        }); // end Weather row creation w/ then w/ catch

      }); // end response w/ END function
    }).on('error', function(e) {
      console.log("Got error from openWeatherMapAPI call: " + e.message);
    }); // end RESPONSE function Open Weather Map API

    done();
    pg.end();

  }); // end client query w/ barometric function

}); // end postgres server connection function
